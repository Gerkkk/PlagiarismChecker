version: '3.8'

services:
  api-gateway:
    build:
      context: ./ApiGateway
      dockerfile: Dockerfile
    ports:
      - "8081:8080"
    depends_on:
      file-service:
        condition: service_started
    restart: always
    networks:
      - app-network
  file-service:
    container_name: file-service
    build:
      context: ./FilesService
      dockerfile: Dockerfile
    ports:
      - "9091:9090"
    networks:
      - app-network
    volumes:
      - ./files:/app/files
  stat-service:
    container_name: stat-service
    build:
      context: ./StatService
      dockerfile: Dockerfile
    ports:
      - "9092:9090"
    networks:
      - app-network
#    volumes:
#      - ./files:/app/files
  files-postgres:
    image: postgres:15-alpine
    container_name: files_db
    environment:
      POSTGRES_DB: files_db
      POSTGRES_USER: files
      POSTGRES_PASSWORD: files
    volumes:
      - files_postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U files -d files_db" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network
  stats-postgres:
    image: postgres:15-alpine
    container_name: stats_db
    environment:
      POSTGRES_DB: stats_db
      POSTGRES_USER: stats
      POSTGRES_PASSWORD: stats
    volumes:
      - stats_postgres_data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U stats -d stats_db" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network
networks:
  app-network:
    driver: bridge

volumes:
  files_postgres_data:
  stats_postgres_data: